class Solution {
public:

    int rec(int n){
        //base case
        if( n == 1 || n == 0){
            return 1;
        }
        int ans = rec(n - 1) + rec(n - 2);
        return ans;
    }
    //However, this solution has exponential time complexity (O(2^n)) due to redundant calculations.

    int recdp(int n, vector<int> &dp){
        //base case 
        // if(n == 1 || n == 0){
        //     return 1;
        // }
        // if(dp[n] != -1){
        //     return dp[n];
        // }
        // dp[n] = recdp(n - 1, dp) + recdp(n-2, dp);
        // return dp[n]
        
        dp[0] = 1;
        dp[1] = 1;
        // n - 0 toh loop 0 - n
        for(int i = 2; i <= n ; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }




    int climbStairs(int n) {
        // int ans = rec(n);
        vector<int>dp(n+2 , -1);
        int ans = recdp(n , dp);
        return ans;
    }
};



tc - > 0(n
sc - > 0(n

//we can further optimize space  to 0(1
int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        int prev = 1, curr = 1;
        for (int i = 2; i <= n; i++) {
            int temp = curr;
            curr = prev + curr;
            prev = temp;
        }
        return curr;
    }
