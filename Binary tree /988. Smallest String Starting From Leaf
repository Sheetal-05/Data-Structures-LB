class Solution {
public:
    string smallestFromLeaf(TreeNode* root) {
        string ans;
        dfs(root, "", ans);
        return ans;
    }
    
    void dfs(TreeNode* root, string path, string& ans) {
        if (!root) return;
        
        path += char('a' + root->val);
        
        if (!root->left && !root->right) {
            reverse(path.begin(), path.end());
            if (ans.empty() || path < ans) {
                ans = path;
            }
            reverse(path.begin(), path.end());
        }
        
        dfs(root->left, path, ans);
        dfs(root->right, path, ans);
    }
};

// Time complexity: O(NH)O(NH)O(NH), where NNN is the number of nodes in the tree. We perform a DFS traversal of the entire tree.
// Space complexity: O(H)O(H)O(H), where HHH is the height of the tree. The space is primarily occupied by the recursive call stack during DFS traversal.
