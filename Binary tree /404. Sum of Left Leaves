/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:


    int sumOfLeftLeaves(TreeNode* root) {
        
        int ans = 0;
        if(root == NULL){
            return 0;
        }
        if(root->left != NULL && root->left->left == NULL && root->left->right == NULL){
            //leaf node
            ans += root->left->val;
        }
        ans+= sumOfLeftLeaves(root->left);
        ans+= sumOfLeftLeaves(root->right);
        return ans;


    }


};

// Time complexity: O(N)O(N)O(N), where N is the number of nodes in the binary tree. We visit each node once.
// Space complexity: O(H)O(H)O(H), where H is the height of the binary tree. The space complexity is determined by the recursion stack.
